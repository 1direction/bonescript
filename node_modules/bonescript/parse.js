// This parses pinmux data from the register value
var modeFromStatus = function(pinData, mode) {
    mode = mode || {};
    mode.slew = (pinData & 0x40) ? 'slow' : 'fast';
    mode.rx = (pinData & 0x20) ? 'enabled' : 'disabled';
    var pullup = (pinData & 0x18) >> 3;
    switch(pullup) {
    case 1:
        mode.pullup = 'disabled';
        break;
    case 2:
        mode.pullup = 'pullup';
        break;
    case 0:
        mode.pullup = 'pulldown';
        break;
    case 3:
    default:
        console.error('Unknown pullup value: '+pullup);
    }
    return(mode);
};

var modeFromOmapMux = function(readout, mode) {
    //console.log('' + readout);
    mode = mode || {};
    // The format read from debugfs looks like this:
    // name: mcasp0_axr0.spi1_d1 (0x44e10998/0x998 = 0x0023), b NA, t NA
    // mode: OMAP_PIN_OUTPUT | OMAP_MUX_MODE3
    // signals: mcasp0_axr0 | ehrpwm0_tripzone | NA | spi1_d1 | mmc2_sdcd_mux1 | NA | NA | gpio3_16
    var breakdown = '';
    try {
        breakdown = readout.split('\n');
    } catch(ex) {
        console.log('Unable to parse mux readout "' + readout + '": ' + ex);
        return(mode);
    }
    try {        
        // Parse the muxmode number, '3' in the above example
        mode.mux = breakdown[1].split('|')[1].substr(-1);
        // Parse the mux register value, '0x0023' in the above example
        var pinData = parseInt(breakdown[0].split('=')[1].substr(1,6));
        //console.log('pinData = ' + pinData);
        mode = parse.modeFromStatus(pinData, mode);
    } catch(ex2) {
        console.log('Unable to parse mux mode "' + breakdown + '": ' + ex2);
    }
    try {
        mode.options = breakdown[2].split('|');
        for(var option in mode.options) {
            var x = ''+mode.options[option];
            try {
                mode.options[option] = x.replace(/ /g, '').replace('signals:', '');
            } catch(ex) {
                console.log('Unable to parse option "' + x + '": ' + ex);
                mode.options[option] = 'NA';
            }
        }
    } catch(ex3) {
        console.log('Unable to parse options "' + breakdown + '": ' + ex3);
        mode.options = null;
    }
    return(mode);
};

exports.modeFromStatus = modeFromStatus;
exports.modeFromOmapMux = modeFromOmapMux;
