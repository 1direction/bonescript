var fs = require('fs');
var winston = require('winston');
var Epoll = require('epoll').Epoll;

if(process.argv.length > 2) {
    // TODO - The switch from Pollpri to Epoll still needs to be made here.
    var file = process.argv[2];
    var gpioPoll = new misc.Pollpri(file);
    var gpioHandler = function(value) {
        value = value.replace(/\s*$/, '');
        winston.info(''+value);
    };
    gpioPoll.on('edge', gpioHandler);
} else {
    var onMessage = function(m) {
        winston.debug('Attaching handler to ' + m.file);
        var valuefd = fs.openSync(m.file, 'r');
        var value = new Buffer(1);
        var gpioPoll = new Epoll(function(err, fd, events) {
            //winston.debug('Got interrupt event');
            if (err) {
                winston.error('Error handling interrupt from ' + m.file + ': ' + err.message);
                process.exit(1);
            }
            try {
                fs.readSync(valuefd, value, 0, 1, 0);
                process.send({'value': value.toString()});
            } catch(ex) {
                winston.error('Unable to send message to parent process: ' + ex);
                process.exit(1);
            }
        });

        // Read the GPIO value file before polling to
        // prevent an initial unauthentic interrupt.
        fs.readSync(valuefd, value, 0, 1, 0);

        gpioPoll.add(valuefd, Epoll.EPOLLPRI);
    };
    process.on('message', onMessage);
    winston.debug('Started GPIO interrupt listener');
}
