// Copyright (C) 2013 - Texas Instruments, Jason Kridner
var bone = require('./bone');
var my = require('./my');

var serialport = my.require('serialport');
var serialPorts = {};

exports.serialOpen = function(port, options, callback) {
    if(!serialport.exists) {
        if(callback) callback({err:'serialport module not loaded'});
        return(false);
    }
    if(bone.uarts[port] && bone.uarts[port].devicetree) {
        var fragment = bone.uarts[port].devicetree;
        if(!my.is_capemgr()) {
            if(callback) callback({err:'Kernel does not include CapeMgr module'});
            return(false);
        }
        if(!my.load_dt(fragment)) {
            if(callback) callback({err:'Devicetree overlay fragment ' + fragment + ' not loaded'});
            return(false);
        }
    }
    serialPorts[port] = new serialport.SerialPort(port, options);
    if(!serialPorts[port]) {
        if(callback) callback({err:'Unable to open serial port'});
        return(false);
    }
    serialPorts[port].on('open', onSerialPortOpen);
    serialPorts[port].on('data', onSerialPortData);
    function onSerialPortOpen() {
        if(callback) {
            callback({'event':'open'});
        }
    }
    function onSerialPortData(data) {
        if(callback) {
            callback({'event':'data', 'data':data});
        }
    }
    return(true);
}
exports.serialOpen.args = ['port', 'options', 'callback'];

exports.serialWrite = function(port, data, callback) {
    if(!serialport.exists) {
        if(callback) callback({err:'serialport module not loaded'});
        return(false);
    }
    if(!serialPorts[port]) {
        if(callback) callback({err:'serialPort ' + port + ' not opened'});
        return(false);
    }
    serialPorts[port].write(data, onSerialPortWrite);
    function onSerialPortWrite(err, results) {
        if(callback) {
            callback({'event':'write', 'results':results, 'err':err});
        }
    }
    return(true);
}
exports.serialWrite.args = ['port', 'data', 'callback'];
